<% if @locations.blank? %>
  <p><small>* No locations. No map *</small></p>
<% else %>
      <script>
        var map;
        var markers     = <%= @locations.to_json.html_safe %>;
        var objectives  = <%= @trip.objectives.to_json.html_safe %>;

        function initMap() {
          map = new google.maps.Map(document.getElementById('map'), {
            center: markers[0],
            zoom: 8
          });

          var infowindow = new google.maps.InfoWindow(), marker, i;
          var bounds = new google.maps.LatLngBounds();

          for (i = 0; i < markers.length; i++) {  
              marker = new google.maps.Marker({
                  position: markers[i],
                  map: map
              });
              
              // extending a bounds range per marker 
              bounds.extend(marker.position);

              google.maps.event.addListener(marker, 'click', (function(marker, i) {
                  return function() {
                      infowindow.setContent(objectives[i].title);
                      infowindow.open(map, marker);
                  }
              })(marker, i));
          }

          // Fitting map to bounds
          map.fitBounds(bounds);

          var listener = google.maps.event.addListener(map, "idle", function () {
              map.setZoom(6);
              google.maps.event.removeListener(listener);
          });

        }


    </script>
    
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_KEY'] %>&callback=initMap"
      async defer></script>
    

    <!-- Add Div to body -->
  <div id="map" style="width:500px;height:380px;"></div>
<% end %>  
<br>
<div class="well">
  <div id="objectives-div">
    <h1 id="trip-objectives">Trip Objectives</h1>
    <a class="btn btn-primary" id="new-objective" role="button">New Objective</a>
  </div>
  <h1><%= @trip.title %></h1>
  
    <ul>
    <% @sortedObjectives.each_with_index do |objective, index| %>
      <!-- duplicate states hav nil set, so when each state gets compared to each objective's location state it will display the state which has already already been sorted and not the nil state --> 
      
      <% if objective.location %>
        <% if objective.location.state == @states[index] %>
          <h4 id="<%= index %>" class="btn btn-info" title="<%= objective.location.state %>" ><%= objective.location.state %>'s Objectives:</h4>
        <% end %>
          <!-- <li><h4><%= link_to objective.title, trip_objective_path(objective.trip, objective) %></h4></li>
          <li>City:    <%= objective.location.city    %></li>
          <li>State:   <%= objective.location.state   %></li>
          <li>Country: <%= objective.location.country %></li>
          <li>Notes:   <%= objective.notes            %></li>
          <li><%= link_to "Edit this objective", edit_trip_objective_path(@trip, objective) %></li>
          <%= button_to "Delete Objective", trip_objective_path(@trip, objective), method: :delete, data: { confirm: "Are you sure?" } %>
      <br> -->
      <% else %>
        <p><small>No location. Please edit this objective and select a location or add one below!</small></p>
      <% end %>
      
    <% end %>
    </ul>
</div>
<%= render 'layouts/links' %>

<script type="text/javascript">

  $(function() {
    // currentPath var gets the pathname for the current trip
    var path        = window.location.pathname;

    $("#new-objective").click(function() {
      var url = path+'/objectives/new',
       parser = new DOMParser();

      $.get(url, function(data){
        // parsing data(page at /objectives/new) from text to html
        var htmlDoc = parser.parseFromString(data, "text/html"),
            form    = htmlDoc.body.children[2].children[10];
        // adding the parsed out form
        $("#new-objective").after(form);
      })
    });

    $("h4").click(function() {
    // grab the details for this element to use jquery
      var state = $(this)[0].title;
      var url   = path+'/objectives/state/'+state;
      
      // testing if the element div#state exists
      if ($("div#"+state).get()[0]) {
        // reseting the div if it exists
        $("div#"+state).remove();
        $(this).after("<div id="+state+"></div>");
      } else {
        $(this).after("<div id="+state+"></div>");
      }

      $.get(url, function(data){
        // using regex to grab everything before last back slash which should be a state
        var location = $(this)[0].url.match(/[^/]+$/)[0];

        $.each(data, function(index,key) {
        // Inserting objectives after objectives button based on location
          $("div#"+location+"").append("<li>To do: "+data[index].title+"</li><li>Notes: "+data[index].notes+"</li><br>");
        })
      });

    });

  });

</script>

